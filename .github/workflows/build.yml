name: Build Pipeline

on:
  workflow_run:
    workflows: ["Validate Pipeline"]
    types:
      - completed

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create VERSION file if it doesn't exist
        run: |
          if [ ! -f VERSION ]; then
            echo "0.1.0" > VERSION  # Cambia a la versi√≥n inicial que desees
          fi

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - name: Restore pip cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install setuptools
        run: python -m pip install --upgrade --force-reinstall pip setuptools

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Read current version
        id: read_version
        run: |
          VERSION=$(cat VERSION)
          echo "Current version is $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Increment version
        id: increment_version
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ env.VERSION }}"
          PATCH=$((PATCH + 1)) # Increment the PATCH version
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version is $NEW_VERSION"
          echo "$NEW_VERSION" > VERSION
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Build Docker image
        run: cd src/ && docker build -t "${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}" .

      - name: Tag Docker image as latest
        if: github.ref == 'refs/heads/main'
        run: |
          cd src/
          docker tag "${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}" "${{ secrets.DOCKER_USERNAME }}/my-app:latest"

      - name: Tag Docker image with version
        run: |
          cd src/
          docker tag "${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}" "${{ secrets.DOCKER_USERNAME }}/my-app:${{ env.NEW_VERSION }}"

      - name: Push Docker images
        run: |
          docker push "${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}"
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            docker push "${{ secrets.DOCKER_USERNAME }}/my-app:latest"
          fi
          docker push "${{ secrets.DOCKER_USERNAME }}/my-app:${{ env.NEW_VERSION }}"

      - name: Commit new version
        run: |
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_NAME }}"
          git add VERSION
          git commit -m "üì¶Ô∏è Bump version to ${{ env.NEW_VERSION }}"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/cloudntainer/crud-python.git HEAD:refs/heads/main

